namespace Naucera.Iambic
{
	/// <summary>
	/// Abstract implementation of a parser grammar construct.
	/// </summary>
	/// 
	/// <remarks>
	/// <para>Copyright (C) 2010 by Amanda Koh.</para>
	/// </remarks>

	public abstract class GrammarConstruct
	{
		readonly string mName;
		TokenConversion mTokenConversion;


		protected GrammarConstruct(string name)
		{
			mName = name;
		}


		/// <summary>
		/// Flag indicating whether a token conversion has been set for this construct.
		/// </summary>

		public bool HasConversion
		{
			get { return mTokenConversion != null; }
		}


		public string Name
		{
			get { return mName; }
		}


		internal object ReplaceToken(Token token, ParseContext context, params object[] args)
		{
			if (mTokenConversion == null)
				return null;

			return mTokenConversion(token, context, args);
		}


		/// <summary>
		/// Sets the conversion to use for replacing tokens generated by this
		/// grammar construct with values, or disabling conversion if null is
		/// specified.
		/// </summary>
		/// 
		/// <param name="conversion">
		/// Conversion for tokens parsed by this grammar construct, or null.
		/// </param>
		/// 
		/// <returns>
		/// This grammar construct.</returns>

		public GrammarConstruct ReplacingMatchesWith(TokenConversion conversion)
		{
			mTokenConversion = conversion;
			return this;
		}
	}
}
